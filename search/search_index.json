{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidos a los Apuntes del M\u00f3dulo HLC","text":"<p>Estos apuntes han sido elaborados para el m\u00f3dulo HLC del ciclo de Sistemas Microinform\u00e1ticos y Redes. Aqu\u00ed encontrar\u00e1s informaci\u00f3n estructurada y recursos \u00fatiles para tu aprendizaje.</p>"},{"location":"#unidades","title":"Unidades","text":"<ul> <li>HTML</li> <li>CSS</li> <li>Algoritmia y Programaci\u00f3n</li> </ul>"},{"location":"#autor","title":"Autor","text":"<p>Este sitio fue elaborado por Antonio D\u00edaz Santamar\u00eda con el objetivo de facilitar la comprensi\u00f3n y el acceso a los temas clave del m\u00f3dulo.</p> <p>\u00a1Explora las secciones desde el men\u00fa para comenzar!</p>"},{"location":"u03/u03_01/","title":"Introducci\u00f3n a la Programaci\u00f3n","text":"<p>La programaci\u00f3n es el proceso de dise\u00f1ar y construir un conjunto de instrucciones que le permiten a un ordenador realizar tareas espec\u00edficas. Estas instrucciones, conocidas como c\u00f3digo, se escriben en un lenguaje de programaci\u00f3n que el ordenador puede interpretar o compilar para ejecutar.</p>"},{"location":"u03/u03_01/#para-que-sirve-la-programacion","title":"\u00bfPara que sirve la Programaci\u00f3n?","text":"<p>La programaci\u00f3n es una habilidad esencial en el mundo actual, utilizada en diversas \u00e1reas como la automatizaci\u00f3n, el desarrollo de software, la inteligencia artificial y la gesti\u00f3n de datos.</p> <p>Algunos de sus funcionalidades son en los siguientes campos:</p> <ul> <li>Automatizaci\u00f3n de tareas: Permite realizar tareas repetitivas de manera autom\u00e1tica, aumentando la eficiencia.</li> <li>Soluci\u00f3n de problemas: Ayuda a resolver problemas complejos a trav\u00e9s de algoritmos y estructuras l\u00f3gicas.</li> <li>Innovaci\u00f3n tecnol\u00f3gica: Es la base de la creaci\u00f3n de software, aplicaciones y sistemas que transforman la sociedad.</li> <li>Accesibilidad: Facilita la comunicaci\u00f3n entre humanos y m\u00e1quinas mediante herramientas interactivas. </li> </ul> <p>La programaci\u00f3n tiene aplicaciones pr\u00e1cticamente ilimitadas, entre las que destacan:</p> <ul> <li>Desarrollo de software (sistemas operativos, aplicaciones m\u00f3viles y de escritorio).</li> <li>Creaci\u00f3n de videojuegos y experiencias interactivas.</li> <li>Gesti\u00f3n de datos y bases de datos.</li> <li>Automatizaci\u00f3n de procesos industriales y empresariales.</li> <li>Desarrollo web y de aplicaciones en la nube.  </li> </ul>"},{"location":"u03/u03_01/#ciclo-de-vida-de-un-programa","title":"Ciclo de vida de un programa","text":"<p>El desarrollo de un programa no ocurre de manera espont\u00e1nea; sigue un proceso estructurado llamado ciclo de vida del software, que incluye las siguientes etapas:</p> <ol> <li>An\u00e1lisis de Requisitos: se identifican las necesidades del cliente. Por ejemplo, un programa para calcular el IVA de un producto requiere entradas como el precio base y la tasa de IVA a aplicar, finalmente mostrar\u00e1 una salida, que ser\u00e1 el precio total. Para su uso se utilizan herramientas como los diagramas UML.</li> <li>Dise\u00f1o: creaci\u00f3n de la estructura l\u00f3gica del programa (algoritmos y diagramas de flujo). Se dise\u00f1a la interfaz de usuario si es necesario.</li> <li>Codificaci\u00f3n: traducci\u00f3n de los algoritmos al lenguaje de programaci\u00f3n elegido.</li> <li>Pruebas: verificaci\u00f3n de que el programa funciona correctamente. Identificaci\u00f3n y correcci\u00f3n de los errores (debugging).</li> <li>Implementaci\u00f3n: despliegue del programa en el entorno donde se usar\u00e1.</li> <li>Mantenimiento: actualizaci\u00f3n y mejora del programa seg\u00fan nuevas necesidades o errores encontrados. </li> </ol>"},{"location":"u03/u03_01/#que-es-un-programador","title":"\u00bfQu\u00e9 es un Programador?","text":"<p>Es un profesional especializado en dise\u00f1ar, escribir, probar y mantener el c\u00f3digo fuente de los programas. Su trabajo requiere habilidades t\u00e9cnicas y l\u00f3gicas, as\u00ed como creatividad para resolver problemas.</p> <p>Entre sus responsabilidades podemos citar:</p> <ul> <li>Comprender los requisitos del cliente o usuario.</li> <li>Dise\u00f1ar algoritmos y diagramas de flujo.</li> <li>Codificar en lenguajes de programaci\u00f3n.</li> <li>Identificar y solucionar errores en el c\u00f3digo.</li> <li>Colaborar con otros desarrolladores y equipos multidisciplinarios.</li> </ul>"},{"location":"u03/u03_02/","title":"Fases de An\u00e1lisis y Dise\u00f1o","text":"<p>Estas fases tienen ciertas caracter\u00edsticas:</p> <ul> <li>Independiente del lenguaje de programaci\u00f3n.</li> <li>Ha de ser f\u00e1cil de entender y modificar.</li> <li>Es la base para poder realizar el programa que resuelva el problema planteado.</li> </ul> <p>Previamente hemos pasado la fase de An\u00e1lisis de Requisitos, en el que se han recopilado todos los datos necesarios para satisfacer el problema que tiene el cliente. Para ello el analista se habr\u00e1 reunido en repetidas ocasiones con los clientes.</p> <p>Una vez se ha recogido todos los datos, hay que realizar el an\u00e1lisis del problema, es decir especificar la forma en la que se va a resolver el problema. Para ello se va a dise\u00f1ar lo que se denomina un Algoritmo.</p>"},{"location":"u03/u03_02/#algoritmo","title":"Algoritmo","text":"Podemos definir algoritmo como una serie de pasos, cuyo seguimiento nos ayuda a resolver un problema. Por ejemplo, una receta de cocina. <p>Todos los programas constan de varias fases, que podemos resumir con el siguiente gr\u00e1fico:</p> <p> </p> <p>La fase intermedia, es decir el programa, es el conjunto de instrucciones que son dise\u00f1adas por el Algoritmo.</p> <p>Todo algoritmo debe cumplir ciertos criterios:</p> <ul> <li>Debe ser preciso.</li> <li>Debe ser finito.</li> <li>Ante el mismo conjunto de datos de entrada, su ejecuci\u00f3n siempre debe producir la misma salida. </li> </ul>"},{"location":"u03/u03_02/#herramientas-para-disenar-un-algoritmo","title":"Herramientas para dise\u00f1ar un Algoritmo.","text":"<p>Se utilizan distintas herramientas, como son diagrama de flujo y pseudoc\u00f3digo:</p> <ul> <li>Diagrama de Flujo: es una representaci\u00f3n gr\u00e1fica de un algoritmo. Utiliza s\u00edmbolos est\u00e1ndar para ilustrar las operaciones y decisiones dentro de un proceso. Algunos de los s\u00edmbolos m\u00e1s utilizados son:<ul> <li>\u00d3valo: Inicio y fin del programa.</li> <li>Rect\u00e1ngulo: Proceso o acci\u00f3n a realizar.</li> <li>Rombo: Decisiones l\u00f3gicas (condicionales).</li> <li>Flechas: Indican el flujo del programa.</li> </ul> </li> <li>Pseudoc\u00f3digo: es una representaci\u00f3n del algoritmo que se utilizar\u00e1 para resolver el problema, de una manera m\u00e1s cercana a un lenguaje de programaci\u00f3n, aunque sigue siendo en un lenguaje natural y sin las reglas sint\u00e1cticas y sem\u00e1nticas de un lenguaje de programaci\u00f3n.</li> </ul>"},{"location":"u03/u03_03/","title":"PseInt","text":"<p>Es una herramienta educativa desarrollada por Pablo Novara, que se utiliza para ense\u00f1ar algoritmia y l\u00f3gica de programaci\u00f3n utilizando un lenguaje de pseudoc\u00f3digo sencillo.</p> <p>En este apartado, se proporciona a los alumnos/as una gu\u00eda clara para el uso de PSeInt, desde su instalaci\u00f3n hasta la resoluci\u00f3n de problemas utilizando estructuras b\u00e1sicas y avanzadas.</p>"},{"location":"u03/u03_03/#instalacion-y-configuracion","title":"Instalaci\u00f3n y Configuraci\u00f3n","text":"<ol> <li>Descarga: Accede al sitio oficial PSeInt y descarga la versi\u00f3n adecuada para tu sistema operativo (Windows, macOS o Linux).</li> <li>Instalaci\u00f3n: Sigue las instrucciones del instalador.</li> <li>Abre PSeInt.</li> <li>Ve a Opciones &gt; Configuraci\u00f3n &gt; Preferencias de Sintaxis.</li> <li>Activa el perfil Estricto para trabajar con un estilo uniforme.</li> </ol>"},{"location":"u03/u03_03/#primeros-pasos","title":"Primeros Pasos","text":"<ol> <li> <p>Crear un Algoritmo:</p> <ul> <li>Haz clic en Archivo &gt; Nuevo.</li> <li>Define un nombre y comienza a escribir tu pseudoc\u00f3digo.</li> </ul> </li> <li> <p>Ejecutar:</p> <ul> <li>Presiona F9 o haz clic en el bot\u00f3n Ejecutar.</li> </ul> </li> <li> <p>Diagrama de Flujo:</p> <ul> <li>Ver &gt; Diagrama de Flujo para visualizar el flujo l\u00f3gico de tu algoritmo.</li> </ul> </li> </ol>"},{"location":"u03/u03_03/#opciones-destacables","title":"Opciones Destacables","text":"<p>Generaci\u00f3n de Diagramas de Flujo</p> <ul> <li>Genera autom\u00e1ticamente un diagrama a partir del pseudoc\u00f3digo escrito.</li> <li>Puedes editar el diagrama y reflejar cambios en el c\u00f3digo. </li> </ul> <p>Cambio al perfil ESTRICTO</p> <ul> <li>Asegura un estilo uniforme.</li> <li>Accede desde Opciones &gt; Configuraci\u00f3n &gt; Preferencias de Sintaxis.</li> </ul>"},{"location":"u03/u03_03/#ejemplo-1o-calcuo-del-area-y-perimetro-de-un-cuadrado","title":"Ejemplo 1\u00ba: Calcuo del \u00e1rea y per\u00edmetro de un cuadrado","text":"<pre><code>//Enunciado: Partiendo del lado de un cuadrado, que lo introducir\u00e1 el usuario.  \n//Calcular el \u00e1rea y el per\u00edmetro  \n//Datos: lado (entero)  \n//Salida: \u00e1rea y per\u00edmetro (enteros)  \n//Variables: lado, \u00e1rea, per\u00edmetro\nProceso Cuadrado\n\n    //Defino las varabiales como tipo Entero\n    Definir lado, perimetro, area como Entero;\n    Escribir \"Introduce el valor del lado: \";\n\n    //Inicializo las variables\n    Leer lado;\n    area &lt;- lado * lado;\n    perimetro &lt;- 4 * lado;\n\n    //Las muestro en pantalla\n    Escribir \"\u00c1rea: \", area, \", Per\u00edmetro: \", perimetro;\n    Escribir \"\u00c1rea mayor que Per\u00edmetro: \", area &gt; perimetro;\nFinProceso\n</code></pre> <p>Como buenas pr\u00e1cticas, los c\u00f3digos siempre llevan comentarios aclarativos, as\u00ed como una correcta tabulaci\u00f3n. </p> <p>Como se puede observar en el c\u00f3digo anterior, los comentarios se introducen antecedi\u00e9ndolos de los caracteres //.</p> <p>A continuaci\u00f3n, se puede ver el diagrama de flujo asociado al c\u00f3digo anterior:</p> <p> </p>"},{"location":"u03/u03_04/","title":"Entrada/Salida","text":"<p>Las instrucciones de entrada y salida son esenciales para que un programa pueda comunicarse con el usuario. Estas permiten recibir informaci\u00f3n y mostrar resultados, lo que es fundamental en cualquier algoritmo.</p> <p>En el Ejemplo 1\u00ba, del apartado anterior, puede observase como se solicita al usuario que introduzca datos (con la instrucci\u00f3n Leer), y como se muestra por pantalla (con la instrucci\u00f3n Escribir).</p> <p>La sintaxis de ambos es:</p> <pre><code>Leer nombre_de_variable;\nEscribir nombre_de_variable; \nEscribir \u201ctexto literal\u201d;\n</code></pre> <p>Tanto Leer, como Escribir, permite trabajar con varias variables o literales a la vez, separ\u00e1ndolos por comas, algunos ejemplos son:</p> <pre><code>Leer base, altura;\nEscribir \u201cEl resultado de la base es: \u201c, base, \u201c Y el de la altura es:\u201d, altura;\n</code></pre>"},{"location":"u03/u03_05/","title":"Tipos de Datos.","text":"<p>En PSeInt, los tipos de datos permiten definir el tipo de informaci\u00f3n que se va a manejar en las variables. Esto es esencial para garantizar que las operaciones realizadas sean v\u00e1lidas y evitar errores.</p> <p>Los principales tipos de datos son:</p> <ul> <li>ENTERO: Representa n\u00fameros enteros, positivos o negativos, sin decimales. Por ejemplo: 0, 2099, 10, -45, -99.</li> <li>REAL: Representa n\u00fameros con decimales, el decimal se representa con un punto. Por ejemplo: 3.14 o -2.5.</li> <li>CADENA DE CARACTERES: Representa un conjunto de caracteres alfab\u00e9ticos, se encierra entre comillas dobles. Por ejemplo: \u201chola\u201d, \u201cHola, buenos d\u00edas\u201d, \u201c1234\u201d, \u201csoy el n\u00famero 1234\u201d.</li> <li>L\u00d3GICO: Representa los valores Verdadero/Falso. Por ejemplo 4&gt;3, 4&lt;3. </li> </ul> <p>Algunos ejemplos de declaraciones son:</p> <pre><code>Definir edad como Entero;\nDefinir salario como Real;\nDefinir nombre como Cadena;\nDefinir estudiadoTema como L\u00f3gico;\n</code></pre> <p>Es fundamental declarar las variables con el tipo de dato adecuado, ya que cada tipo tiene restricciones y capacidades espec\u00edficas. Por ejemplo:</p> <ul> <li>Enteros no pueden almacenar decimales.</li> <li>Cadenas no pueden ser utilizadas directamente en operaciones matem\u00e1ticas. </li> </ul>"},{"location":"u03/u03_05/#variables","title":"Variables","text":"Las variables las podemos definir como \u201ccajas\u201d, donde se almacenan valores que pueden ir cambiando a lo largo de la ejecuci\u00f3n del programa. <p>Buenas pr\u00e1cticas al dereclarar sus nombres:</p> <ul> <li>Las variables tienen que ser declaradas antes de utilizarla.</li> <li>La declaraci\u00f3n, preferiblemente, se realiza al principio del programa.</li> <li>Los nombres de las variables:<ul> <li>Pueden tener caracteres alfab\u00e9ticos y num\u00e9ricos.</li> <li>Siempre empiezan en un car\u00e1cter alfab\u00e9tico.</li> <li>No pueden contener espacios.</li> <li>Deben ser descriptivos.</li> <li>No se debe utilizar en (la parte derecha de una expresi\u00f3n) o en una comparaci\u00f3n, si previamente no se ha instanciado con un valor. </li> </ul> </li> </ul> <pre><code>//Declaro dos variables tipo enteras\nDefinir diaSemana, diaMes como Entero;\n\n//Instancio la primera\ndiaSemana &lt;- 4;\n</code></pre>"},{"location":"u03/u03_06/","title":"Operadores y Expresiones","text":"<p>Se pueden realizar operaciones (de distintos tipos), con las variables y con valores literales. Los tipos de operadores los podemos agrupar seg\u00fan el tipo de operaci\u00f3n en:</p> <ul> <li>Aritm\u00e9ticos: + - * / % ^</li> <li>Relacionales: =  &lt;  &gt;  &gt;=  &lt;=  &lt;&gt;</li> <li>L\u00f3gicos: Y O NOT</li> </ul> <p>Algunos ejemplos son:</p> <pre><code>Si (edad &gt;= 18 Y tieneLicencia) Entonces\n    Escribir \"Puedes conducir.\";\nFinSi\n\nSi (nota &gt;= 5) Entonces\n    Escribir \"Aprobado\";\nSiNo\n    Escribir \"Suspenso\";\nFinSi\n</code></pre> <p></p>"},{"location":"u03/u03_06/#funciones-incluidas","title":"Funciones Incluidas","text":"<p>PSenInt incluye una serie de funciones que son muy \u00fatiles. </p> <p>Como los operadores se agrupan por el tipo de operaci\u00f3n que realizan:</p> <ul> <li>Matem\u00e1ticas: <ul> <li>ra\u00edz(x): devuelve la ra\u00edz cuadrada del valor de X</li> <li>abs(x): devuelve el valor absoluto de X</li> <li>trunc(x): devuelve el valor truncado de X</li> <li>redond(x): devuelve el valor redondeado de X</li> <li>\u2026</li> </ul> </li> <li>De Cadena:<ul> <li>Longitud(cadena): devuelve la longitud de la cadena</li> <li>May\u00fasculas(cadena): devuelve la cadena con todos los caracteres en may\u00fasculas</li> <li>Concatenar (nombre, apellidos): devuelve una cadena, que ser\u00e1 el resultado de unir las dos que est\u00e1n entre par\u00e9ntesis.</li> <li>\u2026</li> </ul> </li> <li>Otras funciones:<ul> <li>Azar(numero): devuelve un valor aleatorio.</li> <li>HoraActual()</li> <li>FechaActual() </li> </ul> </li> </ul> <p>Algunos ejemplos son:</p> <pre><code>Definir numero como Entero;\nLeer numero;\nEscribir \"La ra\u00edz cuadrada es: \", raiz(numero);\n\nDefinir nombreCompleto como Cadena;\nnombreCompleto &lt;- Concatenar(\"Juan\", \" P\u00e9rez\");\nEscribir \"Nombre y Apellidos: \", nombreCompleto;\n</code></pre> <p></p>"},{"location":"u03/u03_06/#otras-instrucciones","title":"Otras Instrucciones","text":"<p>PSenInt permite un conjunto de instrucciones extras que, si bien no se pueden agrupar entre las anteriores, tambi\u00e9n son muy importantes y ampliamente utilizadas, como:</p> <ul> <li>EscribirSinSaltar</li> <li>BorrarPantalla</li> <li>EsperarTecla</li> <li>Esperar X: esperar\u00e1 X segundos antes de continuar.</li> </ul>"},{"location":"u03/u03_07/","title":"Estructuras Alternativas","text":"Son estructuras que permite elegir entre varias opciones, con lo que el camio a seguir no tiene porque ser \u00fanico, sino que presentar\u00e1 bifurcaciones."},{"location":"u03/u03_07/#instruccion-si","title":"Instrucci\u00f3n SI","text":"<p>Primero comprueba una expresi\u00f3n l\u00f3gica, que podr\u00e1 tomar de valores Verdadero/Falso, Si/No.  En caso de que el resultado de la condici\u00f3n, sea verdadero, realizar\u00e1 una acci\u00f3n, que ser\u00e1n una o varias sentencias.</p> <p>Ejemplo de uso:</p> <p> </p> <pre><code>Si lado&lt;0 Entonces\n    Escribir \"ERROR: el lado no puede ser un valor negativo\"; \nFinSi\n</code></pre> Muy importante utilizar correctamente la tabulaci\u00f3n en las instrucciones SI"},{"location":"u03/u03_07/#instrucciones-sisino","title":"Instrucciones SI..SINO","text":"<p>Similar a la instrucci\u00f3n SI, pero en este caso se puede controlar lo que se ejecutar\u00e1 si se cumple la condici\u00f3n y tambi\u00e9n lo que se ejecutar\u00e1 si no se cumple.</p> <p>Ejemplo de uso:</p> <p> </p> <pre><code>Si edad&gt;=18 Entonces\n    Escribir \"Eres mayor de edad\";\nSiNo\n    Escribir \u201cEres menor de edad\u201d;\nFinSi\n</code></pre> Muy importante utilizar correctamente la tabulaci\u00f3n en las instrucciones SINO. <p>Las instrucciones SI y SINO se pueden anidar</p> <pre><code>Si edad&gt;17 Entonces\n    Si edad=18 Entonces\n        Escribir \u201cEres mayor de edad, acabas de cumplirlo\u201d\n    SiNo\n        Si edad&gt;64 Entonces\n            Escribir \u201cEst\u00e1s jubilado\u201d\n        SiNo\n            Escribir \u201cTienes m\u00e1s de 18 a\u00f1os, pero no est\u00e1s jubilado\u201d\n        FinSi\nSiNo\n    Si edad&gt;15 Entonces\n        Escribir \u201cNo est\u00e1s lejos de la mayor\u00eda de edad\u201d\n    SiNo\n        Escribir \u201cA\u00fan te falta bastante para cumplir 18\u201d\n    FinSi\nFinSi\n</code></pre> <p></p>"},{"location":"u03/u03_07/#instruccion-segun","title":"Instruccion SEG\u00daN","text":"<p>Es una estructura alternativa, pero a diferencia de las instrucciones Si y SiNo, la condici\u00f3n puede tomar distintos valores, no se limita a Verdadero/Falso.</p> <p>Por ejemplo, supongamos que estamos rellenando el bolet\u00edn de notas, seg\u00fan las calificaciones que ha obtenido el alumno/a:</p> <p> </p> <pre><code>Segun nota Hacer\n    0,1,2,3,4: Escribir \"Est\u00e1s suspenso\";\n    5: Escribir \"La nota es Suficiente\";\n    6: Escribir \"La nota es Bien\";\n    7,8: Escribir \"La nota es Notable\";\n    9,10: Escribir \"Enhorabuena, tienes un Sobresaliente\";\n    De Otro Modo: Escribir \"La nota introducida NO es correcta\";\nFinSegun\n</code></pre>"},{"location":"u03/u03_08/","title":"Estructuras Repetitivas.","text":"Tambi\u00e9n llamadas bucles, son un conjunto de instrucciones que se repiten un n\u00famero determinado de veces, en ocasiones hasta alcanzar un n\u00famero de vueltas concretas, o hasta que una variable alcance un determinado valor, etc. <p>Cada una de las \"vueltas\" se denomina iteraci\u00f3n.</p> Siempre se tiene que controlar, que el bucle realmente tenga fin. <p>Por ejemplo:</p> <p> </p> <p>C\u00f3mo se puede apreciar en el diagrama de flujo, el bucle se va a repetir mientras que la variable cont sea menor que 10, como empieza con el valor 0, se repetir\u00e1 10 veces.</p> <p>Existen 3 tipos de bucles:</p> <ul> <li>Mientras: Cuando no se sabe cu\u00e1ntas iteraciones se realizar\u00e1n.</li> <li>Repetir-Hasta Que: Cuando se necesita que el bloque se ejecute al menos una vez.</li> <li>Para: Cuando se conoce el n\u00famero exacto de iteraciones. </li> </ul>"},{"location":"u03/u03_08/#instruccion-mientras","title":"Instrucci\u00f3n MIENTRAS","text":"<p>Se utiliza cuando no se sabe a priori cuantas iteraciones tendr\u00e1 que realizar, sino que esto viene marcado por el valor de una variable concreta.</p> <p>Se podr\u00eda dar el caso que no llegase a entrar nunca en el bucle.</p> <pre><code>Proceso TablaMultiplicar\n    Definir contador, num como Entero;\n\n    contador &lt;- 0;\n    sumatorio &lt;- 0;\n\n    Escribir \"Indica el N\u00ba para mostrar su tabla de multiplicar:\";\n    Leer num;\n\n    Mientras contador &lt; 10 Hacer\n        contador &lt;- contador + 1;\n        sumatorio &lt;- num + sumatorio;       \n        Escribir num, \" * \", contador, \" = \", sumatorio;\n    FinMientras\n\n    Escribir \"Fin del programa\";\nFinProceso\n</code></pre> <p></p>"},{"location":"u03/u03_08/#instruccion-repetir-hasta-que","title":"Instrucci\u00f3n REPETIR-HASTA QUE","text":"<p>La diferencia con la anterior (mientras), es que en esta siempre entra en el bucle, es decir, siempre ejecuta la iteraci\u00f3n al menos 1 vez, a diferencia de la instrucci\u00f3n MIENTRAS, que no ten\u00edamos seguridad que realizase ninguna iteraci\u00f3n.</p> <p>Como se puede apreciar en la figura, realiza las acciones de bucle, y luego realiza la comprobaci\u00f3n. El c\u00f3digo correspondiente ser\u00e1:</p> <p> </p> <pre><code>Proceso TablaMultiplicar\n    Definir contador, num, sumatorio como Entero;\n\n    contador &lt;- 0;\n    sumatorio &lt;- 0;\n\n    Escribir \"Indica el N\u00ba para mostrar su tabla de multiplicar:\";\n    Leer num;\n\n    Repetir\n        contador &lt;- contador + 1;\n        sumatorio &lt;- num + sumatorio;       \n        Escribir num, \" * \", contador, \" = \", sumatorio;\n    Hasta Que contador &gt;= 10\n\n    Escribir \"Fin del programa\";\nFinProceso\n</code></pre>"},{"location":"u03/u03_08/#instruccion-para","title":"Instrucci\u00f3n PARA","text":"<p>Se utiliza cuando se conoce el n\u00famero de iteraciones que debe realizar.</p> <p> </p> <pre><code>Proceso TablaMultiplicar\n    Definir contador, num, sumatorio como Entero;\n\n    sumatorio &lt;- 0;\n\n    Escribir \"Indica el N\u00ba para mostrar su tabla de multiplicar:\";\n    Leer num;\n\n    Para contador &lt;- 1 Hasta 10 con Paso 1 Hacer\n        Escribir num, \" * \", contador, \" = \", sumatorio;\n    FinPara\n\n    Escribir \"Fin del programa\";\nFinProceso\n</code></pre> <p>Como puede verse en el ejemplo, en la sintaxis se permite la opci\u00f3n Con Paso X, con el que se puede indicar de cuanto ser\u00e1 el incremento de la variable en cada iteraci\u00f3n, cuando el aumento es de 1, no es necesario indicarlo, en el ejemplo se ha indicado para que se pueda observar la sintaxis completa.</p>"},{"location":"u03/u03_09/","title":"Funciones","text":"<p>La programaci\u00f3n estructurada permite \"subdividir\" el programa principal en m\u00f3dulos m\u00e1s peque\u00f1os y especializados, de forma que cuando exista una porci\u00f3n de c\u00f3digo que se repita muchas veces, se puede codificar como una funci\u00f3n independiente, a la que posteriormente podremos invocar, cada vez que la necesitemos.</p> <p>Pongamos el caso que queremos calcular el m\u00e1ximo de 2 n\u00fameros, el pseuc\u00f3digo para ello podr\u00eda ser:</p> <pre><code>Proceso Maximo\n    Definir num1, num2, max Como Entero;\n\n    Escribir(\"Indica el primer n\u00famero: \");\n    Leer num1;\n    Escribir(\"Ahora el segundo: \");\n    Leer num2;\n\n    Si (num1&gt;num2) Entonces\n        max &lt;- num1;\n    SiNo\n        max &lt;- num2;\n    FinSi\n\n    Escribir \"El mayor es: \", max;\nFinProceso\n</code></pre> <p>Ahora supongamos que queremos calcular el m\u00e1ximo de 4 n\u00fameros, a los que vamos a llamar num1, num2, num3, num4, el c\u00f3digo podr\u00eda ser algo parecido a lo siguiente:</p> <pre><code>Proceso Maximo\n    Definir num1, num2, num3, num4, max1-2, max3-4, max Como Entero;\n\n    Escribir(\"Indica el primer n\u00famero: \");\n    Leer num1;\n    Escribir(\"Ahora el segundo: \");\n    Leer num2;\n    Escribir(\"Indica el tercero n\u00famero: \");\n    Leer num3;\n    Escribir(\"Ahora el cuarto: \");\n    Leer num4;\n\n    Si (num1&gt;num2) Entonces\n        max1-2 &lt;- num1;\n    SiNo\n        max1-2 &lt;- num2;\n    FinSi\n\n    Si (num3&gt;num4) Entonces\n        max3-4 &lt;- num3;\n    SiNo\n        max3-4 &lt;- num4;\n    FinSi\n\n    Si (max1-2&gt;max3-4) Entonces\n        max &lt;- max1-2;\n    SiNo\n        max &lt;- max3-4;\n    FinSi\n\n    Escribir \"El mayor es: \", max;\nFinProceso\n</code></pre> <p>Donde primero hemos calculado el m\u00e1ximo de los 2 primeros n\u00fameros, y lo hemos guardado en una variable a la que hemos llamado max1-2, y el m\u00e1ximo de los n\u00fameros 3 y 4 lo hemos guardado en una variable a la que hemos llamado max3-4, finalmente hemos comparado estos 2 m\u00e1ximos intermedios (max1-2 y max3-4) y hemos elegido el mayor de ambos.</p> <p>Ha sido un proceso bastante largo, y eso que s\u00f3lo lo hemos hecho con 4 variables, puedes imaginar lo que ser\u00eda con 10 n\u00fameros, o mejor a\u00fan con 100.</p> <p>Existe una forma m\u00e1s limpia, que genera menos c\u00f3digo, por lo que tambi\u00e9n tendremos menos posibilidad de cometer erratas, que es utilizar funciones. </p> <p>Para ello se define como m\u00f3dulo independiente del proceso principal, al que se llamar\u00e1 con una serie de argumentos (en nuestro ejemplo ser\u00e1n 2 n\u00fameros cualesquiera) y realizar\u00e1 un proceso con esos datos, finalmente ese proceso puede devolver un resultado o simplemente mostrar algo en pantalla, en nuestro ejemplo devolver\u00e1 el mayor de los dos n\u00fameros. Veamos el c\u00f3digo:</p> <pre><code>Funcion max &lt;- CalcularMaximo(a,b)\n    Definir max como Entero;\n\n    Si (a&gt;b) Entonces\n        max &lt;- a;\n    SiNo\n        max &lt;- b;\n    FinSi\nFinFuncion\n\nProceso Maximo\n    Definir num1, num2, num3, num4, max12, max34, max Como Entero;\n\n    Escribir(\"Indica el primer n\u00famero: \");\n    Leer num1;\n    Escribir(\"Ahora el segundo: \");\n    Leer num2;  \n    Escribir(\"El tercero: \");\n    Leer num3;\n    Escribir(\"Y el cuarto: \");\n    Leer num4;\n\n    max12 &lt;- CalcularMaximo(num1,num2);\n    max34 &lt;- CalcularMaximo(num3, num4);\n    max &lt;- CalcularMaximo(max12, max34);\n\n    Escribir \"El mayor es: \", max;\nFinProceso\n</code></pre> <p>C\u00f3mo puede observarse el c\u00f3digo se ha reducido bastante, pero incluso se puede reducir m\u00e1s a\u00fan, y reducir el n\u00famero de variables necesarias:</p> <pre><code>Proceso Maximo\n    Definir num1, num2, num3, num4, max Como Entero;\n\n    Escribir(\"Indica el primer n\u00famero: \");\n    Leer num1;\n    Escribir(\"Ahora el segundo: \");\n    Leer num2;  \n    Escribir(\"El terecero: \");\n    Leer num3;\n    Escribir(\"Y el cuarto: \");\n    Leer num4;  \n\n    //Estamos llamando a la funci\u00f3n CalcularM\u00e1ximo 3 veces \n    //en la misma instrucci\u00f3n\n    max &lt;- CalcularMaximo( CalcularMaximo(num1,num2), CalcularMaximo(num3, num4));\n\n    Escribir \"El mayor es: \", max;\nFinProceso\n</code></pre>"}]}